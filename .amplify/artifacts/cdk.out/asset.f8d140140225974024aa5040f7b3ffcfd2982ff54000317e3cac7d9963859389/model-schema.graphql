type Stage @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  stageNumber: Int
  title: String
  description: String
  code: Code @hasOne(references: ["codeId"])
  blanks: [Blanks] @hasMany(references: ["blankId"])
  score: [Score] @hasMany(references: ["scoreId"])
}

type Code @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  codeId: ID
  stage: Stage @belongsTo(references: ["codeId"])
  html: [String]
  css: [String]
  js: [String]
}

type Blanks @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  blankId: ID
  stage: Stage @belongsTo(references: ["blankId"])
  blankKey: String
  placeholder: String
  answer: String
  choices: [String]
}

type Score @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  scoreId: ID
  stage: Stage @belongsTo(references: ["scoreId"])
  attempt: Int
  score: Int
}

type Recruitment @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  password: String
  user: String
  isRecruiting: Boolean
  room: Room @hasOne(references: ["id"])
}

type Room @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  id: ID! @primaryKey
  members: [String]
  code: RealTimeCode @hasOne(references: ["id"])
  recruitment: Recruitment @belongsTo(references: ["id"])
}

type RealTimeCode @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  id: ID! @primaryKey
  room: Room @belongsTo(references: ["id"])
  content: [String]
  language: String
  lastModiedBy: String
}