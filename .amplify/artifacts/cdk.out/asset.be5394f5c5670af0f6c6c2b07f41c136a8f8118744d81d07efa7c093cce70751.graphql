type Stage @aws_api_key @aws_iam @aws_cognito_user_pools {
  stageNumber: Int
  title: String
  description: String
  code: Code
  blanks(filter: ModelBlanksFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelBlanksConnection
  score(filter: ModelScoreFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelScoreConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Code @aws_api_key @aws_iam @aws_cognito_user_pools {
  codeId: ID
  stage: Stage
  html: [String]
  css: [String]
  js: [String]
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Blanks @aws_api_key @aws_iam @aws_cognito_user_pools {
  blankId: ID
  stage: Stage
  blankKey: String
  placeholder: String
  answer: String
  choices: [String]
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Score @aws_api_key @aws_iam @aws_cognito_user_pools {
  scoreId: ID
  stage: Stage
  attempt: Int
  score: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Room @aws_api_key @aws_iam @aws_cognito_user_pools {
  room_id: Int!
  password: String
  messages: [Message]
  members: [Member]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message @aws_api_key @aws_iam @aws_cognito_user_pools {
  room_id: Int!
  message: String
  send_user: String
}

type Member @aws_api_key @aws_iam @aws_cognito_user_pools {
  room_id: Int!
  username: String
}

type Query {
  getStage(id: ID!): Stage @aws_api_key @aws_iam @aws_cognito_user_pools
  listStages(filter: ModelStageFilterInput, limit: Int, nextToken: String): ModelStageConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getCode(id: ID!): Code @aws_api_key @aws_iam @aws_cognito_user_pools
  listCodes(filter: ModelCodeFilterInput, limit: Int, nextToken: String): ModelCodeConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getBlanks(id: ID!): Blanks @aws_api_key @aws_iam @aws_cognito_user_pools
  listBlanks(filter: ModelBlanksFilterInput, limit: Int, nextToken: String): ModelBlanksConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getScore(id: ID!): Score @aws_api_key @aws_iam @aws_cognito_user_pools
  listScores(filter: ModelScoreFilterInput, limit: Int, nextToken: String): ModelScoreConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getRoom(room_id: Int!): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  listRooms(room_id: Int, filter: ModelRoomFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelRoomConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  chatWebSocket(name: String): String @aws_iam @aws_api_key @aws_cognito_user_pools
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelStageConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Stage]!
  nextToken: String
}

input ModelStageFilterInput {
  stageNumber: ModelIntInput
  title: ModelStringInput
  description: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelStageFilterInput]
  or: [ModelStageFilterInput]
  not: ModelStageFilterInput
}

input ModelStageConditionInput {
  stageNumber: ModelIntInput
  title: ModelStringInput
  description: ModelStringInput
  and: [ModelStageConditionInput]
  or: [ModelStageConditionInput]
  not: ModelStageConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateStageInput {
  stageNumber: Int
  title: String
  description: String
  id: ID
}

input UpdateStageInput {
  stageNumber: Int
  title: String
  description: String
  id: ID!
}

input DeleteStageInput {
  id: ID!
}

type Mutation {
  createStage(input: CreateStageInput!, condition: ModelStageConditionInput): Stage @aws_api_key @aws_iam @aws_cognito_user_pools
  updateStage(input: UpdateStageInput!, condition: ModelStageConditionInput): Stage @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteStage(input: DeleteStageInput!, condition: ModelStageConditionInput): Stage @aws_api_key @aws_iam @aws_cognito_user_pools
  createCode(input: CreateCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam @aws_cognito_user_pools
  updateCode(input: UpdateCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteCode(input: DeleteCodeInput!, condition: ModelCodeConditionInput): Code @aws_api_key @aws_iam @aws_cognito_user_pools
  createBlanks(input: CreateBlanksInput!, condition: ModelBlanksConditionInput): Blanks @aws_api_key @aws_iam @aws_cognito_user_pools
  updateBlanks(input: UpdateBlanksInput!, condition: ModelBlanksConditionInput): Blanks @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteBlanks(input: DeleteBlanksInput!, condition: ModelBlanksConditionInput): Blanks @aws_api_key @aws_iam @aws_cognito_user_pools
  createScore(input: CreateScoreInput!, condition: ModelScoreConditionInput): Score @aws_api_key @aws_iam @aws_cognito_user_pools
  updateScore(input: UpdateScoreInput!, condition: ModelScoreConditionInput): Score @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteScore(input: DeleteScoreInput!, condition: ModelScoreConditionInput): Score @aws_api_key @aws_iam @aws_cognito_user_pools
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionStageFilterInput {
  stageNumber: ModelSubscriptionIntInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionStageFilterInput]
  or: [ModelSubscriptionStageFilterInput]
}

type Subscription {
  onCreateStage(filter: ModelSubscriptionStageFilterInput): Stage @aws_subscribe(mutations: ["createStage"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateStage(filter: ModelSubscriptionStageFilterInput): Stage @aws_subscribe(mutations: ["updateStage"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteStage(filter: ModelSubscriptionStageFilterInput): Stage @aws_subscribe(mutations: ["deleteStage"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateCode(filter: ModelSubscriptionCodeFilterInput): Code @aws_subscribe(mutations: ["createCode"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateCode(filter: ModelSubscriptionCodeFilterInput): Code @aws_subscribe(mutations: ["updateCode"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteCode(filter: ModelSubscriptionCodeFilterInput): Code @aws_subscribe(mutations: ["deleteCode"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateBlanks(filter: ModelSubscriptionBlanksFilterInput): Blanks @aws_subscribe(mutations: ["createBlanks"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateBlanks(filter: ModelSubscriptionBlanksFilterInput): Blanks @aws_subscribe(mutations: ["updateBlanks"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteBlanks(filter: ModelSubscriptionBlanksFilterInput): Blanks @aws_subscribe(mutations: ["deleteBlanks"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateScore(filter: ModelSubscriptionScoreFilterInput): Score @aws_subscribe(mutations: ["createScore"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateScore(filter: ModelSubscriptionScoreFilterInput): Score @aws_subscribe(mutations: ["updateScore"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteScore(filter: ModelSubscriptionScoreFilterInput): Score @aws_subscribe(mutations: ["deleteScore"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["createRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["updateRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["deleteRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

type ModelCodeConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Code]!
  nextToken: String
}

input ModelCodeFilterInput {
  codeId: ModelIDInput
  html: ModelStringInput
  css: ModelStringInput
  js: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCodeFilterInput]
  or: [ModelCodeFilterInput]
  not: ModelCodeFilterInput
}

input ModelCodeConditionInput {
  codeId: ModelIDInput
  html: ModelStringInput
  css: ModelStringInput
  js: ModelStringInput
  and: [ModelCodeConditionInput]
  or: [ModelCodeConditionInput]
  not: ModelCodeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCodeInput {
  codeId: ID
  html: [String]
  css: [String]
  js: [String]
  id: ID
}

input UpdateCodeInput {
  codeId: ID
  html: [String]
  css: [String]
  js: [String]
  id: ID!
}

input DeleteCodeInput {
  id: ID!
}

input ModelSubscriptionCodeFilterInput {
  codeId: ModelSubscriptionIDInput
  html: ModelSubscriptionStringInput
  css: ModelSubscriptionStringInput
  js: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCodeFilterInput]
  or: [ModelSubscriptionCodeFilterInput]
}

type ModelBlanksConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Blanks]!
  nextToken: String
}

input ModelBlanksFilterInput {
  blankId: ModelIDInput
  blankKey: ModelStringInput
  placeholder: ModelStringInput
  answer: ModelStringInput
  choices: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelBlanksFilterInput]
  or: [ModelBlanksFilterInput]
  not: ModelBlanksFilterInput
}

input ModelBlanksConditionInput {
  blankId: ModelIDInput
  blankKey: ModelStringInput
  placeholder: ModelStringInput
  answer: ModelStringInput
  choices: ModelStringInput
  and: [ModelBlanksConditionInput]
  or: [ModelBlanksConditionInput]
  not: ModelBlanksConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateBlanksInput {
  blankId: ID
  blankKey: String
  placeholder: String
  answer: String
  choices: [String]
  id: ID
}

input UpdateBlanksInput {
  blankId: ID
  blankKey: String
  placeholder: String
  answer: String
  choices: [String]
  id: ID!
}

input DeleteBlanksInput {
  id: ID!
}

input ModelSubscriptionBlanksFilterInput {
  blankId: ModelSubscriptionIDInput
  blankKey: ModelSubscriptionStringInput
  placeholder: ModelSubscriptionStringInput
  answer: ModelSubscriptionStringInput
  choices: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionBlanksFilterInput]
  or: [ModelSubscriptionBlanksFilterInput]
}

type ModelScoreConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Score]!
  nextToken: String
}

input ModelScoreFilterInput {
  scoreId: ModelIDInput
  attempt: ModelIntInput
  score: ModelIntInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelScoreFilterInput]
  or: [ModelScoreFilterInput]
  not: ModelScoreFilterInput
}

input ModelScoreConditionInput {
  scoreId: ModelIDInput
  attempt: ModelIntInput
  score: ModelIntInput
  and: [ModelScoreConditionInput]
  or: [ModelScoreConditionInput]
  not: ModelScoreConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateScoreInput {
  scoreId: ID
  attempt: Int
  score: Int
  id: ID
}

input UpdateScoreInput {
  scoreId: ID
  attempt: Int
  score: Int
  id: ID!
}

input DeleteScoreInput {
  id: ID!
}

input ModelSubscriptionScoreFilterInput {
  scoreId: ModelSubscriptionIDInput
  attempt: ModelSubscriptionIntInput
  score: ModelSubscriptionIntInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionScoreFilterInput]
  or: [ModelSubscriptionScoreFilterInput]
}

input MessageInput {
  room_id: Int!
  message: String
  send_user: String
}

input MemberInput {
  room_id: Int!
  username: String
}

type ModelRoomConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Room]!
  nextToken: String
}

input ModelRoomFilterInput {
  room_id: ModelIntInput
  password: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

input ModelRoomConditionInput {
  password: ModelStringInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRoomInput {
  room_id: Int!
  password: String
  messages: [MessageInput]
  members: [MemberInput]
}

input UpdateRoomInput {
  room_id: Int!
  password: String
  messages: [MessageInput]
  members: [MemberInput]
}

input DeleteRoomInput {
  room_id: Int!
}

input ModelSubscriptionRoomFilterInput {
  room_id: ModelSubscriptionIntInput
  password: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRoomFilterInput]
  or: [ModelSubscriptionRoomFilterInput]
}
