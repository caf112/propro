type Room @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  room_id: Int!
  password: String
  messages: [Message]
  members: [Member]
  member_count: Int
  code: Code
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: Int!
  room_id: Int!
  message: String
  send_user: String
}

type Member @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  room_id: Int!
  username: String
}

type Code @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  room_id: Int!
  content: [String]
  lastModifiedBy: String
  codeJudge: [Boolean]
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input MessageInput {
  id: Int!
  room_id: Int!
  message: String
  send_user: String
}

input MemberInput {
  id: ID!
  room_id: Int!
  username: String
}

input CodeInput {
  id: ID!
  room_id: Int!
  content: [String]
  lastModifiedBy: String
  codeJudge: [Boolean]
}

type ModelRoomConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Room]!
  nextToken: String
}

input ModelRoomFilterInput {
  id: ModelIDInput
  room_id: ModelIntInput
  password: ModelStringInput
  member_count: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

type Query {
  getRoom(id: ID!): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  listRooms(id: ID, filter: ModelRoomFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelRoomConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelRoomConditionInput {
  room_id: ModelIntInput
  password: ModelStringInput
  member_count: ModelIntInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRoomInput {
  id: ID
  room_id: Int!
  password: String
  messages: [MessageInput]
  members: [MemberInput]
  member_count: Int
  code: CodeInput
}

input UpdateRoomInput {
  id: ID!
  room_id: Int
  password: String
  messages: [MessageInput]
  members: [MemberInput]
  member_count: Int
  code: CodeInput
}

input DeleteRoomInput {
  id: ID!
}

type Mutation {
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionRoomFilterInput {
  id: ModelSubscriptionIDInput
  room_id: ModelSubscriptionIntInput
  password: ModelSubscriptionStringInput
  member_count: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRoomFilterInput]
  or: [ModelSubscriptionRoomFilterInput]
}

type Subscription {
  onCreateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["createRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["updateRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["deleteRoom"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}
