{
  "version": 3,
  "sources": ["../../../../node_modules/@aws-amplify/backend-function/src/lambda-shims/cjs_shim.ts", "../../../../node_modules/lodash.merge/index.js", "../../../../amplify/functions/dynamodb-function/handler.ts", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/index.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/Logger.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/index.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/typeUtils.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/Utility.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/config/EnvironmentVariablesService.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/awsSdkUtils.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/version.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/middleware/cleanupMiddlewares.js", "../../../../node_modules/@aws-lambda-powertools/commons/lib/esm/middleware/constants.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/config/EnvironmentVariablesService.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/constants.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/PowertoolsLogFormatter.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogFormatter.js", "../../../../node_modules/@aws-lambda-powertools/logger/lib/esm/formatter/LogItem.js"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport path from 'node:path';\nimport url from 'node:url';\nglobal.require = createRequire(import.meta.url);\nglobal.__filename = url.fileURLToPath(import.meta.url);\nglobal.__dirname = path.dirname(__filename);\n", "/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n", "import type { DynamoDBStreamHandler } from \"aws-lambda\";\r\nimport { Logger } from \"@aws-lambda-powertools/logger\";\r\n\r\nconst logger = new Logger({\r\n  logLevel: \"INFO\",\r\n  serviceName: \"dynamodb-stream-handler\",\r\n});\r\n\r\nexport const handler: DynamoDBStreamHandler = async (event) => {\r\n  for (const record of event.Records) {\r\n    logger.info(`Processing record: ${record.eventID}`);\r\n    logger.info(`Event Type: ${record.eventName}`);\r\n\r\n    if (record.eventName === \"INSERT\") {\r\n      // business logic to process new records\r\n      logger.info(`New Image: ${JSON.stringify(record.dynamodb?.NewImage)}`);\r\n    }\r\n  }\r\n  logger.info(`Successfully processed ${event.Records.length} records.`);\r\n\r\n  return {\r\n    batchItemFailures: [],\r\n  };\r\n};", "export { Logger } from './Logger.js';\nexport { LogFormatter } from './formatter/LogFormatter.js';\nexport { LogItem } from './formatter/LogItem.js';\nexport { LogLevel, LogLevelThreshold } from './constants.js';\n", "import { Console } from 'node:console';\nimport { randomInt } from 'node:crypto';\nimport { Utility } from '@aws-lambda-powertools/commons';\nimport merge from 'lodash.merge';\nimport { EnvironmentVariablesService } from './config/EnvironmentVariablesService.js';\nimport { LogJsonIndent, LogLevelThreshold } from './constants.js';\nimport { PowertoolsLogFormatter } from './formatter/PowertoolsLogFormatter.js';\n/**\n * The Logger utility provides an opinionated logger with output structured as JSON for AWS Lambda.\n *\n * **Key features**\n * * Capture key fields from AWS Lambda context, cold start, and structure log output as JSON\n * * Append additional keys to one or all log items\n * * Switch log level to `DEBUG` based on a sample rate value for a percentage of invocations\n *\n * After initializing the Logger class, you can use the methods to log messages at different levels.\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n *\n * const logger = new Logger({ serviceName: 'serverlessAirline' });\n *\n * export const handler = async (event, context) => {\n *   logger.info('This is an INFO log');\n *   logger.warn('This is a WARNING log');\n * };\n * ```\n *\n * To enrich the log items with information from the Lambda context, you can use the {@link Logger.addContext | addContext()} method.\n *\n * @example\n * ```typescript\n * import { Logger } from '@aws-lambda-powertools/logger';\n *\n * const logger = new Logger({ serviceName: 'serverlessAirline' });\n *\n * export const handler = async (event, context) => {\n *   logger.addContext(context);\n *\n *   logger.info('This is an INFO log with some context');\n * };\n * ```\n *\n * You can also add additional attributes to all log items using the {@link Logger.appendKeys | appendKeys()} method.\n *\n * @example\n * ```typescript\n * export const handler = async (event, context) => {\n *   logger.appendKeys({ key1: 'value1' });\n *\n *   logger.info('This is an INFO log with additional keys');\n *\n *   logger.removeKeys(['key1']);\n * };\n *```\n *\n * If you write your functions as classes and use TypeScript, you can use the {@link Logger.injectLambdaContext} class method decorator\n * to automatically add context to your logs and clear the state after the invocation.\n *\n * If instead you use Middy.js middlewares, you use the {@link \"middleware/middy\".injectLambdaContext | injectLambdaContext()} middleware.\n *\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/\n */\nclass Logger extends Utility {\n    /**\n     * Console instance used to print logs.\n     *\n     * In AWS Lambda, we create a new instance of the Console class so that we can have\n     * full control over the output of the logs. In testing environments, we use the\n     * default console instance.\n     *\n     * This property is initialized in the constructor in setOptions().\n     */\n    console;\n    /**\n     * Custom config service instance used to configure the logger.\n     */\n    customConfigService;\n    /**\n     * Environment variables service instance used to fetch environment variables.\n     */\n    envVarsService = new EnvironmentVariablesService();\n    /**\n     * Whether to print the Lambda invocation event in the logs.\n     */\n    logEvent = false;\n    /**\n     * Formatter used to format the log items.\n     * @default new PowertoolsLogFormatter()\n     */\n    logFormatter;\n    /**\n     * JSON indentation used to format the logs.\n     */\n    logIndentation = LogJsonIndent.COMPACT;\n    /**\n     * Log level used internally by the current instance of Logger.\n     */\n    logLevel = LogLevelThreshold.INFO;\n    /**\n     * Persistent log attributes that will be logged in all log items.\n     */\n    persistentLogAttributes = {};\n    /**\n     * Standard attributes managed by Powertools that will be logged in all log items.\n     */\n    powertoolsLogData = {};\n    /**\n     * Temporary log attributes that can be appended with `appendKeys()` method.\n     */\n    temporaryLogAttributes = {};\n    /**\n     * Buffer used to store logs until the logger is initialized.\n     *\n     * Sometimes we need to log warnings before the logger is fully initialized, however we can't log them\n     * immediately because the logger is not ready yet. This buffer stores those logs until the logger is ready.\n     */\n    #buffer = [];\n    /**\n     * Flag used to determine if the logger is initialized.\n     */\n    #isInitialized = false;\n    /**\n     * Map used to hold the list of keys and their type.\n     *\n     * Because keys of different types can be overwritten, we keep a list of keys that were added and their last\n     * type. We then use this map at log preparation time to pick the last one.\n     */\n    #keys = new Map();\n    /**\n     * This is the initial log leval as set during the initialization of the logger.\n     *\n     * We keep this value to be able to reset the log level to the initial value when the sample rate is refreshed.\n     */\n    #initialLogLevel = LogLevelThreshold.INFO;\n    /**\n     * Replacer function used to serialize the log items.\n     */\n    #jsonReplacerFn;\n    /**\n     * Log level used by the current instance of Logger.\n     *\n     * Returns the log level as a number. The higher the number, the less verbose the logs.\n     * To get the log level name, use the {@link getLevelName()} method.\n     */\n    get level() {\n        return this.logLevel;\n    }\n    constructor(options = {}) {\n        super();\n        const { customConfigService, ...rest } = options;\n        this.setCustomConfigService(customConfigService);\n        // all logs are buffered until the logger is initialized\n        this.setOptions(rest);\n        this.#isInitialized = true;\n        for (const [level, log] of this.#buffer) {\n            // we call the method directly and create the log item just in time\n            this.printLog(level, this.createAndPopulateLogItem(...log));\n        }\n        this.#buffer = [];\n    }\n    /**\n     * Add the current Lambda function's invocation context data to the powertoolLogData property of the instance.\n     * This context data will be part of all printed log items.\n     *\n     * @param context - The Lambda function's invocation context.\n     */\n    addContext(context) {\n        this.addToPowertoolsLogData({\n            lambdaContext: {\n                invokedFunctionArn: context.invokedFunctionArn,\n                coldStart: this.getColdStart(),\n                awsRequestId: context.awsRequestId,\n                memoryLimitInMB: context.memoryLimitInMB,\n                functionName: context.functionName,\n                functionVersion: context.functionVersion,\n            },\n        });\n    }\n    /**\n     * Add the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.\n     *\n     * @param attributes - The attributes to add to all log items.\n     */\n    addPersistentLogAttributes(attributes) {\n        this.appendPersistentKeys(attributes);\n    }\n    /**\n     * Add the given temporary attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @param attributes - The attributes to add to all log items.\n     */\n    appendKeys(attributes) {\n        for (const attributeKey of Object.keys(attributes)) {\n            this.#keys.set(attributeKey, 'temp');\n        }\n        merge(this.temporaryLogAttributes, attributes);\n    }\n    /**\n     * Add the given persistent attributes (key-value pairs) to all log items generated by this Logger instance.\n     *\n     * @param attributes - The attributes to add to all log items.\n     */\n    appendPersistentKeys(attributes) {\n        for (const attributeKey of Object.keys(attributes)) {\n            this.#keys.set(attributeKey, 'persistent');\n        }\n        merge(this.persistentLogAttributes, attributes);\n    }\n    /**\n     * Create a separate Logger instance, identical to the current one.\n     * It's possible to overwrite the new instance options by passing them.\n     *\n     * @param options - The options to initialize the child logger with.\n     */\n    createChild(options = {}) {\n        const childLogger = this.createLogger(\n        // Merge parent logger options with options passed to createChild,\n        // the latter having precedence.\n        merge({}, {\n            logLevel: this.getLevelName(),\n            serviceName: this.powertoolsLogData.serviceName,\n            sampleRateValue: this.powertoolsLogData.sampleRateValue,\n            logFormatter: this.getLogFormatter(),\n            customConfigService: this.getCustomConfigService(),\n            environment: this.powertoolsLogData.environment,\n            persistentLogAttributes: this.persistentLogAttributes,\n            temporaryLogAttributes: this.temporaryLogAttributes,\n            jsonReplacerFn: this.#jsonReplacerFn,\n        }, options));\n        if (this.powertoolsLogData.lambdaContext)\n            childLogger.addContext(this.powertoolsLogData.lambdaContext);\n        return childLogger;\n    }\n    /**\n     * Print a log item with level CRITICAL.\n     *\n     * @param input - The log message.\n     * @param extraInput - The extra input to log.\n     */\n    critical(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.CRITICAL, input, extraInput);\n    }\n    /**\n     * Print a log item with level DEBUG.\n     *\n     * @param input\n     * @param extraInput - The extra input to log.\n     */\n    debug(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.DEBUG, input, extraInput);\n    }\n    /**\n     * Print a log item with level ERROR.\n     *\n     * @param input - The log message.\n     * @param extraInput - The extra input to log.\n     */\n    error(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.ERROR, input, extraInput);\n    }\n    /**\n     * Get the log level name of the current instance of Logger.\n     *\n     * Returns the log level name, i.e. `INFO`, `DEBUG`, etc.\n     * To get the log level as a number, use the {@link Logger.level} property.\n     */\n    getLevelName() {\n        return this.getLogLevelNameFromNumber(this.logLevel);\n    }\n    /**\n     * Return a boolean value. True means that the Lambda invocation events\n     * are printed in the logs.\n     */\n    getLogEvent() {\n        return this.logEvent;\n    }\n    /**\n     * Return the persistent log attributes, which are the attributes\n     * that will be logged in all log items.\n     */\n    getPersistentLogAttributes() {\n        return this.persistentLogAttributes;\n    }\n    /**\n     * Print a log item with level INFO.\n     *\n     * @param input - The log message.\n     * @param extraInput - The extra input to log.\n     */\n    info(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.INFO, input, extraInput);\n    }\n    /**\n     * Class method decorator that adds the current Lambda function context as extra\n     * information in all log items.\n     *\n     * This decorator is useful when you want to add the Lambda context to all log items\n     * and it works only when decorating a class method that is a Lambda function handler.\n     *\n     * @example\n     * ```typescript\n     * import { Logger } from '@aws-lambda-powertools/logger';\n     * import type { LambdaInterface } from '@aws-lambda-powertools/commons/types';\n     *\n     * const logger = new Logger({ serviceName: 'serverlessAirline' });\n     *\n     * class Lambda implements LambdaInterface {\n     *   // Decorate your handler class method\n     *   \u2063@logger.injectLambdaContext()\n     *   public async handler(_event: unknown, _context: unknown): Promise<void> {\n     *     logger.info('This is an INFO log with some context');\n     *   }\n     * }\n     *\n     * const handlerClass = new Lambda();\n     * export const handler = handlerClass.handler.bind(handlerClass);\n     * ```\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/decorators.html#method-decorators\n     */\n    injectLambdaContext(options) {\n        return (_target, _propertyKey, descriptor) => {\n            const originalMethod = descriptor.value;\n            const loggerRef = this;\n            // Use a function() {} instead of an () => {} arrow function so that we can\n            // access `myClass` as `this` in a decorated `myClass.myMethod()`.\n            descriptor.value = async function (event, context, callback) {\n                Logger.injectLambdaContextBefore(loggerRef, event, context, options);\n                let result;\n                try {\n                    result = await originalMethod.apply(this, [event, context, callback]);\n                }\n                finally {\n                    if (options?.clearState || options?.resetKeys)\n                        loggerRef.resetKeys();\n                }\n                return result;\n            };\n        };\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link resetKeys()} instead.\n     */\n    /* v8 ignore start */ static injectLambdaContextAfterOrOnError(logger, _persistentAttributes, options) {\n        if (options && (options.clearState || options?.resetKeys)) {\n            logger.resetKeys();\n        }\n    } /* v8 ignore stop */\n    /**\n     * @deprecated - This method is deprecated and will be removed in the next major version.\n     */\n    static injectLambdaContextBefore(logger, event, context, options) {\n        logger.addContext(context);\n        let shouldLogEvent = undefined;\n        if (options && Object.hasOwn(options, 'logEvent')) {\n            shouldLogEvent = options.logEvent;\n        }\n        logger.logEventIfEnabled(event, shouldLogEvent);\n    }\n    /**\n     * Log the AWS Lambda event payload for the current invocation if the environment variable `POWERTOOLS_LOGGER_LOG_EVENT` is set to `true`.\n     *\n     * @example\n     * ```ts\n     * process.env.POWERTOOLS_LOGGER_LOG_EVENT = 'true';\n     *\n     * import { Logger } from '@aws-lambda-powertools/logger';\n     *\n     * const logger = new Logger();\n     *\n     * export const handler = async (event) => {\n     *   logger.logEventIfEnabled(event);\n     *   // ... your handler code\n     * }\n     * ```\n     *\n     * @param event - The AWS Lambda event payload.\n     * @param overwriteValue - Overwrite the environment variable value.\n     */\n    logEventIfEnabled(event, overwriteValue) {\n        if (!this.shouldLogEvent(overwriteValue))\n            return;\n        this.info('Lambda invocation event', { event });\n    }\n    /**\n     * This method allows recalculating the initial sampling decision for changing\n     * the log level to DEBUG based on a sample rate value used during initialization,\n     * potentially yielding a different outcome.\n     */\n    refreshSampleRateCalculation() {\n        this.setInitialSampleRate(this.powertoolsLogData.sampleRateValue);\n    }\n    /**\n     * Remove temporary attributes based on provided keys to all log items generated by this Logger instance.\n     *\n     * @param keys - The keys to remove.\n     */\n    removeKeys(keys) {\n        for (const key of keys) {\n            this.temporaryLogAttributes[key] = undefined;\n            if (this.persistentLogAttributes[key]) {\n                this.#keys.set(key, 'persistent');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n    }\n    /**\n     * Remove the given keys from the persistent keys.\n     *\n     * @example\n     * ```typescript\n     * import { Logger } from '@aws-lambda-powertools/logger';\n     *\n     * const logger = new Logger({\n     *   persistentKeys: {\n     *     environment: 'prod',\n     *   },\n     * });\n     *\n     * logger.removePersistentKeys(['environment']);\n     * ```\n     *\n     * @param keys - The keys to remove from the persistent attributes.\n     */\n    removePersistentKeys(keys) {\n        for (const key of keys) {\n            this.persistentLogAttributes[key] = undefined;\n            if (this.temporaryLogAttributes[key]) {\n                this.#keys.set(key, 'temp');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in the future major versions. Use {@link removePersistentKeys()} instead.\n     *\n     * @param keys - The keys to remove.\n     */\n    removePersistentLogAttributes(keys) {\n        this.removePersistentKeys(keys);\n    }\n    /**\n     * Remove all temporary log attributes added with `appendKeys()` method.\n     */\n    resetKeys() {\n        for (const key of Object.keys(this.temporaryLogAttributes)) {\n            if (this.persistentLogAttributes[key]) {\n                this.#keys.set(key, 'persistent');\n            }\n            else {\n                this.#keys.delete(key);\n            }\n        }\n        this.temporaryLogAttributes = {};\n    }\n    /**\n     * Set the log level for this Logger instance.\n     *\n     * If the log level is set using AWS Lambda Advanced Logging Controls, it sets it\n     * instead of the given log level to avoid data loss.\n     *\n     * @param logLevel The log level to set, i.e. `error`, `warn`, `info`, `debug`, etc.\n     */\n    setLogLevel(logLevel) {\n        if (this.awsLogLevelShortCircuit(logLevel))\n            return;\n        if (this.isValidLogLevel(logLevel)) {\n            this.logLevel = LogLevelThreshold[logLevel];\n        }\n        else {\n            throw new Error(`Invalid log level: ${logLevel}`);\n        }\n    }\n    /**\n     * Set the given attributes (key-value pairs) to all log items generated by this Logger instance.\n     * Note: this replaces the pre-existing value.\n     *\n     * @deprecated This method is deprecated and will be removed in the future major versions, please use {@link appendPersistentKeys()} instead.\n     *\n     * @param attributes - The attributes to set.\n     */\n    setPersistentLogAttributes(attributes) {\n        this.persistentLogAttributes = attributes;\n    }\n    /**\n     * Check whether the current Lambda invocation event should be printed in the logs or not.\n     *\n     * @param overwriteValue - Overwrite the environment variable value.\n     */\n    shouldLogEvent(overwriteValue) {\n        if (typeof overwriteValue === 'boolean') {\n            return overwriteValue;\n        }\n        return this.getLogEvent();\n    }\n    /**\n     * Print a log item with level TRACE.\n     *\n     * @param input - The log message.\n     * @param extraInput - The extra input to log.\n     */\n    trace(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.TRACE, input, extraInput);\n    }\n    /**\n     * Print a log item with level WARN.\n     *\n     * @param input - The log message.\n     * @param extraInput - The extra input to log.\n     */\n    warn(input, ...extraInput) {\n        this.processLogItem(LogLevelThreshold.WARN, input, extraInput);\n    }\n    /**\n     * Factory method for instantiating logger instances. Used by `createChild` method.\n     * Important for customization and subclassing. It allows subclasses, like `MyOwnLogger`,\n     * to override its behavior while keeping the main business logic in `createChild` intact.\n     *\n     * @example\n     * ```typescript\n     * // MyOwnLogger subclass\n     * class MyOwnLogger extends Logger {\n     *   protected createLogger(options?: ConstructorOptions): MyOwnLogger {\n     *     return new MyOwnLogger(options);\n     *   }\n     *   // No need to re-implement business logic from `createChild` and keep track on changes\n     *   public createChild(options?: ConstructorOptions): MyOwnLogger {\n     *     return super.createChild(options) as MyOwnLogger;\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Logger configuration options.\n     */\n    createLogger(options) {\n        return new Logger(options);\n    }\n    /**\n     * A custom JSON replacer function that is used to serialize the log items.\n     *\n     * By default, we already extend the default serialization behavior to handle `BigInt` and `Error` objects, as well as remove circular references.\n     * When a custom JSON replacer function is passed to the Logger constructor, it will be called **before** our custom rules for each key-value pair in the object being stringified.\n     *\n     * This allows you to customize the serialization while still benefiting from the default behavior.\n     *\n     * @see {@link ConstructorOptions.jsonReplacerFn}\n     */\n    getJsonReplacer() {\n        const references = new WeakSet();\n        return (key, value) => {\n            let replacedValue = value;\n            if (this.#jsonReplacerFn)\n                replacedValue = this.#jsonReplacerFn?.(key, replacedValue);\n            if (replacedValue instanceof Error) {\n                replacedValue = this.getLogFormatter().formatError(replacedValue);\n            }\n            if (typeof replacedValue === 'bigint') {\n                return replacedValue.toString();\n            }\n            if (typeof replacedValue === 'object' && replacedValue !== null) {\n                if (references.has(replacedValue)) {\n                    return;\n                }\n                references.add(replacedValue);\n            }\n            return replacedValue;\n        };\n    }\n    /**\n     * Store information that is printed in all log items.\n     *\n     * @param attributes - The attributes to add to all log items.\n     */\n    addToPowertoolsLogData(attributes) {\n        merge(this.powertoolsLogData, attributes);\n    }\n    awsLogLevelShortCircuit(selectedLogLevel) {\n        const awsLogLevel = this.getEnvVarsService().getAwsLogLevel();\n        if (this.isValidLogLevel(awsLogLevel)) {\n            this.logLevel = LogLevelThreshold[awsLogLevel];\n            if (this.isValidLogLevel(selectedLogLevel) &&\n                this.logLevel > LogLevelThreshold[selectedLogLevel]) {\n                this.warn(`Current log level (${selectedLogLevel}) does not match AWS Lambda Advanced Logging Controls minimum log level (${awsLogLevel}). This can lead to data loss, consider adjusting them.`);\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Create a log item and populate it with the given log level, input, and extra input.\n     *\n     * We start with creating an object with base attributes managed by Powertools.\n     * Then we create a second object with persistent attributes provided by customers either\n     * directly to the log entry or through initial configuration and `appendKeys` method.\n     *\n     * Once we have the two objects, we pass them to the formatter that will apply the desired\n     * formatting to the log item.\n     *\n     * @param logLevel - The log level of the log item to be printed\n     * @param input - The main input of the log item, this can be a string or an object with additional attributes\n     * @param extraInput - Additional attributes to be added to the log item\n     */\n    createAndPopulateLogItem(logLevel, input, extraInput) {\n        let message = '';\n        let otherInput = {};\n        if (typeof input === 'string') {\n            message = input;\n        }\n        else {\n            const { message: inputMessage, ...rest } = input;\n            message = inputMessage;\n            otherInput = rest;\n        }\n        // create base attributes\n        const unformattedBaseAttributes = {\n            logLevel: this.getLogLevelNameFromNumber(logLevel),\n            timestamp: new Date(),\n            message,\n            xRayTraceId: this.envVarsService.getXrayTraceId(),\n            ...this.getPowertoolsLogData(),\n        };\n        const additionalAttributes = {};\n        // gradually add additional attributes picking only the last added for each key\n        for (const [key, type] of this.#keys) {\n            if (type === 'persistent') {\n                additionalAttributes[key] = this.persistentLogAttributes[key];\n            }\n            else {\n                additionalAttributes[key] = this.temporaryLogAttributes[key];\n            }\n        }\n        // if the main input is not a string, then it's an object with additional attributes, so we merge it\n        merge(additionalAttributes, otherInput);\n        // then we merge the extra input attributes (if any)\n        for (const item of extraInput) {\n            const attributes = item instanceof Error\n                ? { error: item }\n                : typeof item === 'string'\n                    ? { extra: item }\n                    : item;\n            merge(additionalAttributes, attributes);\n        }\n        return this.getLogFormatter().formatAttributes(unformattedBaseAttributes, additionalAttributes);\n    }\n    /**\n     * Get the custom config service, an abstraction used to fetch environment variables.\n     */\n    getCustomConfigService() {\n        return this.customConfigService;\n    }\n    /**\n     * Get the instance of a service that fetches environment variables.\n     */\n    getEnvVarsService() {\n        return this.envVarsService;\n    }\n    /**\n     * Get the instance of a service that formats the structure of a\n     * log item's keys and values in the desired way.\n     */\n    getLogFormatter() {\n        return this.logFormatter;\n    }\n    /**\n     * Get the log level name from the log level number.\n     *\n     * For example, if the log level is 16, it will return 'WARN'.\n     *\n     * @param logLevel - The log level to get the name of\n     */\n    getLogLevelNameFromNumber(logLevel) {\n        let found;\n        for (const [key, value] of Object.entries(LogLevelThreshold)) {\n            if (value === logLevel) {\n                found = key;\n                break;\n            }\n        }\n        return found;\n    }\n    /**\n     * Get information that will be added in all log item by\n     * this Logger instance (different from user-provided persistent attributes).\n     */\n    getPowertoolsLogData() {\n        return this.powertoolsLogData;\n    }\n    /**\n     * Check if a given log level is valid.\n     *\n     * @param logLevel - The log level to check\n     */\n    isValidLogLevel(logLevel) {\n        return typeof logLevel === 'string' && logLevel in LogLevelThreshold;\n    }\n    /**\n     * Check if a given sample rate value is valid.\n     *\n     * @param sampleRateValue - The sample rate value to check\n     */\n    isValidSampleRate(sampleRateValue) {\n        return (typeof sampleRateValue === 'number' &&\n            0 <= sampleRateValue &&\n            sampleRateValue <= 1);\n    }\n    /**\n     * Print a given log with given log level.\n     *\n     * @param logLevel - The log level\n     * @param log - The log item to print\n     */\n    printLog(logLevel, log) {\n        log.prepareForPrint();\n        const consoleMethod = logLevel === LogLevelThreshold.CRITICAL\n            ? 'error'\n            : this.getLogLevelNameFromNumber(logLevel).toLowerCase();\n        this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getJsonReplacer(), this.logIndentation));\n    }\n    /**\n     * Print a given log with given log level.\n     *\n     * @param logLevel - The log level threshold\n     * @param input - The log message\n     * @param extraInput - The extra input to log\n     */\n    processLogItem(logLevel, input, extraInput) {\n        if (logLevel >= this.logLevel) {\n            if (this.#isInitialized) {\n                this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));\n            }\n            else {\n                this.#buffer.push([logLevel, [logLevel, input, extraInput]]);\n            }\n        }\n    }\n    /**\n     * Initialize the console property as an instance of the internal version of Console() class (PR #748)\n     * or as the global node console if the `POWERTOOLS_DEV' env variable is set and has truthy value.\n     */\n    setConsole() {\n        if (!this.getEnvVarsService().isDevMode()) {\n            this.console = new Console({\n                stdout: process.stdout,\n                stderr: process.stderr,\n            });\n        }\n        else {\n            this.console = console;\n        }\n        /**\n         * Patch `console.trace` to avoid printing a stack trace and aligning with AWS Lambda behavior - see #2902\n         */\n        this.console.trace = (message, ...optionalParams) => {\n            this.console.log(message, ...optionalParams);\n        };\n    }\n    /**\n     * Set the Logger's customer config service instance, which will be used\n     * to fetch environment variables.\n     *\n     * @param customConfigService - The custom config service\n     */\n    setCustomConfigService(customConfigService) {\n        this.customConfigService = customConfigService\n            ? customConfigService\n            : undefined;\n    }\n    /**\n     * Set the initial Logger log level based on the following order:\n     * 1. If a log level is set using AWS Lambda Advanced Logging Controls, it sets it.\n     * 2. If a log level is passed to the constructor, it sets it.\n     * 3. If a log level is set via custom config service, it sets it.\n     * 4. If a log level is set via env variables, it sets it.\n     *\n     * If none of the above is true, the default log level applies (`INFO`).\n     *\n     * @param logLevel - Log level passed to the constructor\n     */\n    setInitialLogLevel(logLevel) {\n        const constructorLogLevel = logLevel?.toUpperCase();\n        if (this.awsLogLevelShortCircuit(constructorLogLevel))\n            return;\n        if (this.isValidLogLevel(constructorLogLevel)) {\n            this.logLevel = LogLevelThreshold[constructorLogLevel];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n        const customConfigValue = this.getCustomConfigService()\n            ?.getLogLevel()\n            ?.toUpperCase();\n        if (this.isValidLogLevel(customConfigValue)) {\n            this.logLevel = LogLevelThreshold[customConfigValue];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n        const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();\n        if (this.isValidLogLevel(envVarsValue)) {\n            this.logLevel = LogLevelThreshold[envVarsValue];\n            this.#initialLogLevel = this.logLevel;\n            return;\n        }\n    }\n    /**\n     * Set the sample rate value with the following priority:\n     * 1. Constructor value\n     * 2. Custom config service value\n     * 3. Environment variable value\n     * 4. Default value (zero)\n     *\n     * @param sampleRateValue - The sample rate value\n     */\n    setInitialSampleRate(sampleRateValue) {\n        this.powertoolsLogData.sampleRateValue = 0;\n        const constructorValue = sampleRateValue;\n        const customConfigValue = this.getCustomConfigService()?.getSampleRateValue();\n        const envVarsValue = this.getEnvVarsService().getSampleRateValue();\n        for (const value of [constructorValue, customConfigValue, envVarsValue]) {\n            if (this.isValidSampleRate(value)) {\n                this.powertoolsLogData.sampleRateValue = value;\n                if (this.logLevel > LogLevelThreshold.DEBUG &&\n                    value &&\n                    randomInt(0, 100) / 100 <= value) {\n                    // only change logLevel if higher than debug, i.e. don't change from e.g. tracing to debug\n                    this.setLogLevel('DEBUG');\n                    this.debug('Setting log level to DEBUG due to sampling rate');\n                }\n                else {\n                    this.setLogLevel(this.getLogLevelNameFromNumber(this.#initialLogLevel));\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * If the log event feature is enabled via env variable, it sets a property that tracks whether\n     * the event passed to the Lambda function handler should be logged or not.\n     */\n    setLogEvent() {\n        if (this.getEnvVarsService().getLogEvent()) {\n            this.logEvent = true;\n        }\n    }\n    /**\n     * Set the log formatter instance, in charge of giving a custom format\n     * to the structured logs, and optionally the ordering for keys within logs.\n     *\n     * @param logFormatter - The log formatter\n     * @param logRecordOrder - Optional list of keys to specify order in logs\n     */\n    setLogFormatter(logFormatter, logRecordOrder) {\n        this.logFormatter =\n            logFormatter ??\n                new PowertoolsLogFormatter({\n                    envVarsService: this.getEnvVarsService(),\n                    logRecordOrder,\n                });\n    }\n    /**\n     * If the `POWERTOOLS_DEV` env variable is set,\n     * add JSON indentation for pretty printing logs.\n     */\n    setLogIndentation() {\n        if (this.getEnvVarsService().isDevMode()) {\n            this.logIndentation = LogJsonIndent.PRETTY;\n        }\n    }\n    /**\n     * Configure the Logger instance settings that will affect the Logger's behaviour\n     * and the content of all logs.\n     *\n     * @param options - Options to configure the Logger instance\n     */\n    setOptions(options) {\n        const { logLevel, serviceName, sampleRateValue, logFormatter, persistentKeys, persistentLogAttributes, // deprecated in favor of persistentKeys\n        environment, jsonReplacerFn, logRecordOrder, } = options;\n        if (persistentLogAttributes && persistentKeys) {\n            this.warn('Both persistentLogAttributes and persistentKeys options were provided. Using persistentKeys as persistentLogAttributes is deprecated and will be removed in future releases');\n        }\n        // configurations that affect log content\n        this.setPowertoolsLogData(serviceName, environment, persistentKeys || persistentLogAttributes);\n        // configurations that affect Logger behavior\n        this.setLogEvent();\n        this.setInitialLogLevel(logLevel);\n        this.setInitialSampleRate(sampleRateValue);\n        // configurations that affect how logs are printed\n        this.setLogFormatter(logFormatter, logRecordOrder);\n        this.setConsole();\n        this.setLogIndentation();\n        this.#jsonReplacerFn = jsonReplacerFn;\n        return this;\n    }\n    /**\n     * Add important data to the Logger instance that will affect the content of all logs.\n     *\n     * @param serviceName - The service name\n     * @param environment - The environment\n     * @param persistentKeys - The persistent log attributes\n     */\n    setPowertoolsLogData(serviceName, environment, persistentKeys = {}) {\n        this.addToPowertoolsLogData({\n            awsRegion: this.getEnvVarsService().getAwsRegion(),\n            environment: environment ||\n                this.getCustomConfigService()?.getCurrentEnvironment() ||\n                this.getEnvVarsService().getCurrentEnvironment(),\n            serviceName: serviceName ||\n                this.getCustomConfigService()?.getServiceName() ||\n                this.getEnvVarsService().getServiceName() ||\n                this.getDefaultServiceName(),\n        });\n        this.appendPersistentKeys(persistentKeys);\n    }\n}\nexport { Logger };\n", "export { isRecord, isString, isNumber, isIntegerNumber, isTruthy, isNull, isNullOrUndefined, getType, isStrictEqual, } from './typeUtils.js';\nexport { Utility } from './Utility.js';\nexport { EnvironmentVariablesService } from './config/EnvironmentVariablesService.js';\nexport { addUserAgentMiddleware, isSdkClient } from './awsSdkUtils.js';\nexport { cleanupMiddlewares } from './middleware/cleanupMiddlewares.js';\nexport { TRACER_KEY, LOGGER_KEY, METRICS_KEY, IDEMPOTENCY_KEY, } from './middleware/constants.js';\nexport { PT_VERSION } from './version.js';\n", "/**\n * Check if a value is a record.\n *\n * @example\n * ```typescript\n * import { isRecord } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = { key: 'value' };\n * if (isRecord(value)) {\n *   // value is a record\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isRecord = (value) => {\n    return (Object.prototype.toString.call(value) === '[object Object]' &&\n        !Object.is(value, null));\n};\n/**\n * Check if a value is a string.\n *\n * @example\n * ```typescript\n * import { isString } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = 'foo';\n * if (isString(value)) {\n *   // value is a string\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isString = (value) => {\n    return typeof value === 'string';\n};\n/**\n * Check if a value is a number.\n *\n * @example\n * ```typescript\n * import { isNumber } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = 42;\n * if (isNumber(value)) {\n *   // value is a number\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isNumber = (value) => {\n    return typeof value === 'number';\n};\n/**\n * Check if a value is an integer number.\n *\n * @example\n * ```typescript\n * import { isIntegerNumber } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = 42;\n * if (isIntegerNumber(value)) {\n *   // value is an integer number\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isIntegerNumber = (value) => {\n    return isNumber(value) && Number.isInteger(value);\n};\n/**\n * Check if a value is truthy.\n *\n * @example\n * ```typescript\n * import { isTruthy } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = 'yes';\n * if (isTruthy(value)) {\n *   // value is truthy\n * }\n * ```\n *\n * @see https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/types-grammar/ch4.md#toboolean\n *\n * @param value The value to check\n */\nconst isTruthy = (value) => {\n    if (isString(value)) {\n        return value !== '';\n    }\n    if (isNumber(value)) {\n        return value !== 0;\n    }\n    if (typeof value === 'boolean') {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.length > 0;\n    }\n    if (isRecord(value)) {\n        return Object.keys(value).length > 0;\n    }\n    return false;\n};\n/**\n * Check if a value is `null`.\n *\n * @example\n * ```typescript\n * import { isNull } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = null;\n * if (isNull(value)) {\n *   // value is null\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isNull = (value) => {\n    return Object.is(value, null);\n};\n/**\n * Check if a value is `null` or `undefined`.\n *\n * @example\n * ```typescript\n * import { isNullOrUndefined } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const value = null;\n * if (isNullOrUndefined(value)) {\n *   // value is null or undefined\n * }\n * ```\n *\n * @param value The value to check\n */\nconst isNullOrUndefined = (value) => {\n    return isNull(value) || Object.is(value, undefined);\n};\n/**\n * Get the type of a value as a string.\n *\n * @example\n * ```typescript\n * import { getType } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const type = getType('foo'); // 'string'\n * const otherType = getType(42); // 'number'\n * const anotherType = getType({ key: 'value' }); // 'object'\n * const unknownType = getType(Symbol('foo')); // 'unknown'\n * ```\n *\n * @param value The value to check\n */\nconst getType = (value) => {\n    if (Array.isArray(value)) {\n        return 'array';\n    }\n    if (isRecord(value)) {\n        return 'object';\n    }\n    if (isString(value)) {\n        return 'string';\n    }\n    if (isNumber(value)) {\n        return 'number';\n    }\n    if (typeof value === 'boolean') {\n        return 'boolean';\n    }\n    if (isNull(value)) {\n        return 'null';\n    }\n    return 'unknown';\n};\n/**\n * Compare two arrays for strict equality.\n *\n * This function compares each element in the arrays, regardless of order.\n *\n * @example\n * ```typescript\n * import { areArraysEqual } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const left = [1, 2, 3];\n * const right = [3, 2, 1];\n * const equal = areArraysEqual(left, right); // true\n *\n * const otherLeft = [1, 2, 3];\n * const otherRight = [1, 2, 4];\n * const otherEqual = areArraysEqual(otherLeft, otherRight); // false\n * ```\n *\n * @param left The left array to compare\n * @param right The right array to compare\n */\nconst areArraysEqual = (left, right) => {\n    if (left.length !== right.length) {\n        return false;\n    }\n    return left.every((value, i) => isStrictEqual(value, right[i]));\n};\n/**\n * Compare two records for strict equality.\n *\n * @example\n * ```typescript\n * import { areRecordsEqual } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const left = { key: 'value' };\n * const right = { key: 'value' };\n * const equal = areRecordsEqual(left, right); // true\n *\n * const otherLeft = { key: 'value' };\n * const otherRight = { key: 'other value' };\n * const otherEqual = areRecordsEqual(otherLeft, otherRight); // false\n * ```\n *\n * @param left The left record to compare\n * @param right The right record to compare\n */\nconst areRecordsEqual = (left, right) => {\n    const leftKeys = Object.keys(left);\n    const rightKeys = Object.keys(right);\n    if (leftKeys.length !== rightKeys.length) {\n        return false;\n    }\n    return leftKeys.every((key) => isStrictEqual(left[key], right[key]));\n};\n/**\n * Check if two unknown values are strictly equal.\n *\n * If the values are arrays, then each element is compared, regardless of\n * order. If the values are objects, then each key and value from left\n * is compared to the corresponding key and value from right. If the\n * values are primitives, then they are compared using strict equality.\n *\n * @example\n * ```typescript\n * import { isStrictEqual } from '@aws-lambda-powertools/commons/typeUtils';\n *\n * const left = { key: 'value' };\n * const right = { key: 'value' };\n * const equal = isStrictEqual(left, right); // true\n *\n * const otherLeft = [1, 2, 3];\n * const otherRight = [3, 2, 1];\n * const otherEqual = isStrictEqual(otherLeft, otherRight); // true\n *\n * const anotherLeft = 'foo';\n * const anotherRight = 'bar';\n * const anotherEqual = isStrictEqual(anotherLeft, anotherRight); // false\n *\n * const yetAnotherLeft = 42;\n * const yetAnotherRight = 42;\n * const yetAnotherEqual = isStrictEqual(yetAnotherLeft, yetAnotherRight); // true\n * ```\n *\n * @param left Left side of strict equality comparison\n * @param right Right side of strict equality comparison\n */\nconst isStrictEqual = (left, right) => {\n    if (left === right) {\n        return true;\n    }\n    if (typeof left !== typeof right) {\n        return false;\n    }\n    if (Array.isArray(left) && Array.isArray(right)) {\n        return areArraysEqual(left, right);\n    }\n    if (isRecord(left) && isRecord(right)) {\n        return areRecordsEqual(left, right);\n    }\n    return false;\n};\nexport { isRecord, isString, isNumber, isIntegerNumber, isTruthy, isNull, isNullOrUndefined, getType, isStrictEqual, };\n", "/**\n * `Utility` is a base class that other Powertools for AWS Lambda (TypeScript) utilites can extend to inherit shared logic.\n *\n * Its main purpose is to encapsulate the cold start heuristic logic. Cold start is a term commonly used to describe the `Init` phase of a Lambda function.\n * In this phase, Lambda creates or unfreezes an execution environment with the configured resources, downloads the code for the function and all layers,\n * initializes any extensions, initializes the runtime, and then runs the function\u2019s initialization code (the code outside the main handler).\n *\n * The Init phase happens either during the first invocation, or in advance of function invocations if you have enabled provisioned concurrency.\n *\n * To learn more about the Lambda execution environment lifecycle, see the [Execution environment section](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html) of the AWS Lambda documentation.\n *\n * As a Powertools for AWS Lambda (TypeScript) user you probably won't be using this class directly, in fact if you use other Powertools for AWS utilities the cold start heuristic found here is already used to:\n * * Add a `coldStart` key to the structured logs when injecting context information in `Logger`\n * * Emit a metric during a cold start function invocation in `Metrics`\n * * Annotate the invocation segment with a `coldStart` key in `Tracer`\n *\n * If you want to use this logic in your own utilities, `Utility` provides two methods:\n *\n * `Utility.getColdStart()`\n *\n * Since the `Utility` class is instantiated outside of the Lambda handler it will persist across invocations of the same execution environment. This means that if you call `getColdStart()` multiple times, it will return `true` during the first invocation, and `false` afterwards.\n *\n * @example\n * ```typescript\n * import { Utility } from '@aws-lambda-powertools/commons';\n *\n * const utility = new Utility();\n *\n * export const handler = async (_event: any, _context: any) => {\n *   utility.getColdStart();\n * };\n * ```\n *\n * `Utility.isColdStart()`\n *\n * This method is an alias of `getColdStart()` and is exposed for convenience and better readability in certain usages.\n *\n * @example\n * ```typescript\n * import { Utility } from '@aws-lambda-powertools/commons';\n *\n * const utility = new Utility();\n *\n * export const handler = async (_event: any, _context: any) => {\n *   if (utility.isColdStart()) {\n *     // do something, this block is only executed on the first invocation of the function\n *   } else {\n *     // do something else, this block gets executed on all subsequent invocations\n *   }\n * };\n * ```\n */\nexport class Utility {\n    coldStart = true;\n    defaultServiceName = 'service_undefined';\n    /**\n     * Get the cold start status of the current execution environment.\n     *\n     * @example\n     * ```typescript\n     * import { Utility } from '@aws-lambda-powertools/commons';\n     *\n     * const utility = new Utility();\n     * utility.isColdStart(); // true\n     * utility.isColdStart(); // false\n     * ```\n     *\n     * The method also flips the cold start status to `false` after the first invocation.\n     */\n    getColdStart() {\n        if (this.coldStart) {\n            this.coldStart = false;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Get the cold start status of the current execution environment.\n     *\n     * @example\n     * ```typescript\n     * import { Utility } from '@aws-lambda-powertools/commons';\n     *\n     * const utility = new Utility();\n     * utility.isColdStart(); // true\n     * utility.isColdStart(); // false\n     * ```\n     *\n     * @see {@link getColdStart}\n     */\n    isColdStart() {\n        return this.getColdStart();\n    }\n    /**\n     * Get the default service name.\n     */\n    getDefaultServiceName() {\n        return this.defaultServiceName;\n    }\n    /**\n     * Validate that the service name provided is valid.\n     * Used internally during initialization.\n     *\n     * @param serviceName Service name to validate\n     */\n    isValidServiceName(serviceName) {\n        return typeof serviceName === 'string' && serviceName.trim().length > 0;\n    }\n}\n", "/**\n * This class is used to fetch environment variables that are available in the execution environment.\n *\n * These variables can be a mix of runtime environment variables set by AWS and\n * other environment variables that are set by the developer to configure Powertools for AWS Lambda.\n *\n * @example\n * ```typescript\n * import { EnvironmentVariablesService } from '@aws-lambda-powertools/commons/';\n *\n * const config = new EnvironmentVariablesService();\n * const serviceName = config.getServiceName();\n * ```\n *\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables\n *\n * @class\n */\nclass EnvironmentVariablesService {\n    /**\n     * Increase JSON indentation for Logger to ease debugging when running functions locally or in a non-production environment\n     */\n    devModeVariable = 'POWERTOOLS_DEV';\n    /**\n     * Set service name used for tracing namespace, metrics dimension and structured logging\n     */\n    serviceNameVariable = 'POWERTOOLS_SERVICE_NAME';\n    /**\n     * AWS X-Ray Trace ID environment variable\n     * @private\n     */\n    xRayTraceIdVariable = '_X_AMZN_TRACE_ID';\n    /**\n     * Get the value of an environment variable by name.\n     *\n     * @param {string} name The name of the environment variable to fetch.\n     */\n    get(name) {\n        return process.env[name]?.trim() || '';\n    }\n    /**\n     * Get the value of the `POWERTOOLS_SERVICE_NAME` environment variable.\n     */\n    getServiceName() {\n        return this.get(this.serviceNameVariable);\n    }\n    /**\n     * Get the value of the `_X_AMZN_TRACE_ID` environment variable.\n     *\n     * The AWS X-Ray Trace data available in the environment variable has this format:\n     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,\n     *\n     * The actual Trace ID is: `1-5759e988-bd862e3fe1be46a994272793`.\n     */\n    getXrayTraceId() {\n        const xRayTraceData = this.getXrayTraceData();\n        return xRayTraceData?.Root;\n    }\n    /**\n     * Determine if the current invocation is part of a sampled X-Ray trace.\n     *\n     * The AWS X-Ray Trace data available in the environment variable has this format:\n     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,\n     */\n    getXrayTraceSampled() {\n        const xRayTraceData = this.getXrayTraceData();\n        return xRayTraceData?.Sampled === '1';\n    }\n    /**\n     * Determine if the current invocation is running in a development environment.\n     */\n    isDevMode() {\n        return this.isValueTrue(this.get(this.devModeVariable));\n    }\n    /**\n     * Helper function to determine if a value is considered thruthy.\n     *\n     * @param value The value to check for truthiness.\n     */\n    isValueTrue(value) {\n        const truthyValues = ['1', 'y', 'yes', 't', 'true', 'on'];\n        return truthyValues.includes(value.toLowerCase());\n    }\n    /**\n     * Helper function to determine if a value is considered falsy.\n     *\n     * @param value The value to check for falsiness.\n     */\n    isValueFalse(value) {\n        const falsyValues = ['0', 'n', 'no', 'f', 'false', 'off'];\n        return falsyValues.includes(value.toLowerCase());\n    }\n    /**\n     * Get the AWS X-Ray Trace data from the environment variable.\n     *\n     * The method parses the environment variable `_X_AMZN_TRACE_ID` and returns an object with the key-value pairs.\n     */\n    getXrayTraceData() {\n        const xRayTraceEnv = this.get(this.xRayTraceIdVariable);\n        if (xRayTraceEnv === '')\n            return undefined;\n        if (!xRayTraceEnv.includes('='))\n            return { Root: xRayTraceEnv };\n        const xRayTraceData = {};\n        for (const field of xRayTraceEnv.split(';')) {\n            const [key, value] = field.split('=');\n            xRayTraceData[key] = value;\n        }\n        return xRayTraceData;\n    }\n}\nexport { EnvironmentVariablesService };\n", "import { PT_VERSION } from './version.js';\nconst EXEC_ENV = process.env.AWS_EXECUTION_ENV || 'NA';\nconst middlewareOptions = {\n    relation: 'after',\n    toMiddleware: 'getUserAgentMiddleware',\n    name: 'addPowertoolsToUserAgent',\n    tags: ['POWERTOOLS', 'USER_AGENT'],\n};\n/**\n * Type guard to check if the client provided is a valid AWS SDK v3 client.\n *\n * @internal\n */\nconst isSdkClient = (client) => typeof client === 'object' &&\n    client !== null &&\n    'send' in client &&\n    typeof client.send === 'function' &&\n    'config' in client &&\n    client.config !== undefined &&\n    typeof client.config === 'object' &&\n    client.config !== null &&\n    'middlewareStack' in client &&\n    client.middlewareStack !== undefined &&\n    typeof client.middlewareStack === 'object' &&\n    client.middlewareStack !== null &&\n    'identify' in client.middlewareStack &&\n    typeof client.middlewareStack.identify === 'function' &&\n    'addRelativeTo' in client.middlewareStack &&\n    typeof client.middlewareStack.addRelativeTo === 'function';\n/**\n * Helper function to create a custom user agent middleware for the AWS SDK v3 clients.\n *\n * The middleware will append the provided feature name and the current version of\n * the Powertools for AWS Lambda library to the user agent string.\n *\n * @example \"PT/Tracer/2.1.0 PTEnv/nodejs20x\"\n *\n * @param feature The feature name to be added to the user agent\n *\n * @internal\n */\nconst customUserAgentMiddleware = (feature) => {\n    return (next) => async (args) => {\n        const powertoolsUserAgent = `PT/${feature}/${PT_VERSION} PTEnv/${EXEC_ENV}`;\n        args.request.headers['user-agent'] =\n            `${args.request.headers['user-agent']} ${powertoolsUserAgent}`;\n        return await next(args);\n    };\n};\n/**\n * Check if the provided middleware stack already has the Powertools for AWS Lambda\n * user agent middleware.\n *\n * @param middlewareStack The middleware stack to check\n *\n * @internal\n */\nconst hasPowertools = (middlewareStack) => {\n    let found = false;\n    for (const middleware of middlewareStack) {\n        if (middleware.includes('addPowertoolsToUserAgent')) {\n            found = true;\n        }\n    }\n    return found;\n};\n/**\n * Add the Powertools for AWS Lambda user agent middleware to the\n * AWS SDK v3 client provided.\n *\n * We use this middleware to unbotrusively track the usage of the library\n * and secure continued investment in the project.\n *\n * @param client The AWS SDK v3 client to add the middleware to\n * @param feature The feature name to be added to the user agent\n */\nconst addUserAgentMiddleware = (client, feature) => {\n    try {\n        if (isSdkClient(client)) {\n            if (hasPowertools(client.middlewareStack.identify())) {\n                return;\n            }\n            client.middlewareStack.addRelativeTo(customUserAgentMiddleware(feature), middlewareOptions);\n        }\n        else {\n            throw new Error('The client provided does not match the expected interface');\n        }\n    }\n    catch (error) {\n        console.warn('Failed to add user agent middleware', error);\n    }\n};\nexport { customUserAgentMiddleware, addUserAgentMiddleware, isSdkClient };\n", "// this file is auto generated, do not modify\nexport const PT_VERSION = '2.13.1';\n", "import { IDEMPOTENCY_KEY, LOGGER_KEY, METRICS_KEY, TRACER_KEY, } from './constants.js';\n/**\n * Typeguard to assert that an object is of Function type.\n *\n * @param obj The object to check\n */\nconst isFunction = (obj) => {\n    return typeof obj === 'function';\n};\n/**\n * Function used to cleanup Powertools for AWS resources when a Middy\n * middleware [returns early](https://middy.js.org/docs/intro/early-interrupt)\n * and terminates the middleware chain.\n *\n * When a middleware returns early, all the middleware lifecycle functions\n * that come after it are not executed. This means that if a middleware\n * was relying on certain logic to be run during the `after` or `onError`\n * lifecycle functions, that logic will not be executed.\n *\n * This is the case for the middlewares that are part of Powertools for AWS\n * which rely on these lifecycle functions to perform cleanup operations\n * like closing the current segment in the tracer or flushing any stored\n * metrics.\n *\n * When authoring a middleware that might return early, you can use this\n * function to cleanup Powertools resources. This function will check if\n * any cleanup function is present in the `request.internal` object and\n * execute it.\n *\n * @example\n * ```typescript\n * import middy from '@middy/core';\n * import { cleanupMiddlewares } from '@aws-lambda-powertools/commons/lib/middleware';\n *\n * // Example middleware that returns early\n * const myCustomMiddleware = (): middy.MiddlewareObj => {\n *   const before = async (request: middy.Request): Promise<undefined | string> => {\n *     // If the request is a GET, return early (as an example)\n *     if (request.event.httpMethod === 'GET') {\n *       // Cleanup Powertools resources\n *       await cleanupMiddlewares(request);\n *       // Then return early\n *       return 'GET method not supported';\n *     }\n *   };\n *\n *   return {\n *     before,\n *   };\n * };\n * ```\n *\n * @param request The Middy request object\n */\nconst cleanupMiddlewares = async (request) => {\n    const cleanupFunctionNames = [\n        TRACER_KEY,\n        METRICS_KEY,\n        LOGGER_KEY,\n        IDEMPOTENCY_KEY,\n    ];\n    for (const functionName of cleanupFunctionNames) {\n        if (Object.hasOwn(request.internal, functionName)) {\n            const functionReference = request.internal[functionName];\n            if (isFunction(functionReference)) {\n                await functionReference(request);\n            }\n        }\n    }\n};\nexport { cleanupMiddlewares };\n", "/**\n * These constants are used to store cleanup functions in Middy's `request.internal` object.\n * They are used by the `cleanupPowertools` function to check if any cleanup function\n * is present and execute it.\n */\nconst PREFIX = 'powertools-for-aws';\n/**\n * Key to store the tracer instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst TRACER_KEY = `${PREFIX}.tracer`;\n/**\n * Key to store the metrics instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst METRICS_KEY = `${PREFIX}.metrics`;\n/**\n * Key to store the logger instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst LOGGER_KEY = `${PREFIX}.logger`;\n/**\n * Key to store the idempotency instance in the `request.internal` object.\n *\n * @see {@link cleanupMiddlewares}\n */\nconst IDEMPOTENCY_KEY = `${PREFIX}.idempotency`;\nexport { PREFIX, TRACER_KEY, METRICS_KEY, LOGGER_KEY, IDEMPOTENCY_KEY };\n", "import { EnvironmentVariablesService as CommonEnvironmentVariablesService } from '@aws-lambda-powertools/commons';\n/**\n * Class EnvironmentVariablesService\n *\n * This class is used to return environment variables that are available in the runtime of\n * the current Lambda invocation.\n * These variables can be a mix of runtime environment variables set by AWS and\n * variables that can be set by the developer additionally.\n *\n * @see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime\n * @see https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables\n */\nclass EnvironmentVariablesService extends CommonEnvironmentVariablesService {\n    // Reserved environment variables\n    awsLogLevelVariable = 'AWS_LAMBDA_LOG_LEVEL';\n    awsRegionVariable = 'AWS_REGION';\n    currentEnvironmentVariable = 'ENVIRONMENT';\n    functionNameVariable = 'AWS_LAMBDA_FUNCTION_NAME';\n    functionVersionVariable = 'AWS_LAMBDA_FUNCTION_VERSION';\n    logEventVariable = 'POWERTOOLS_LOGGER_LOG_EVENT';\n    logLevelVariable = 'POWERTOOLS_LOG_LEVEL';\n    logLevelVariableLegacy = 'LOG_LEVEL';\n    memoryLimitInMBVariable = 'AWS_LAMBDA_FUNCTION_MEMORY_SIZE';\n    sampleRateValueVariable = 'POWERTOOLS_LOGGER_SAMPLE_RATE';\n    tzVariable = 'TZ';\n    /**\n     * Return the value of the `AWS_LAMBDA_LOG_LEVEL` environment variable.\n     *\n     * The `AWS_LAMBDA_LOG_LEVEL` environment variable is set by AWS Lambda when configuring\n     * the function's log level using the Advanced Logging Controls feature. This value always\n     * takes precedence over other means of configuring the log level.\n     *\n     * We need to map the `FATAL` log level to `CRITICAL`, see {@link https://docs.aws.amazon.com/lambda/latest/dg/configuration-logging.html#configuration-logging-log-levels AWS Lambda Log Levels}.\n     */\n    getAwsLogLevel() {\n        const awsLogLevelVariable = this.get(this.awsLogLevelVariable);\n        return awsLogLevelVariable === 'FATAL' ? 'CRITICAL' : awsLogLevelVariable;\n    }\n    /**\n     * Return the value of the AWS_REGION environment variable.\n     */\n    getAwsRegion() {\n        return this.get(this.awsRegionVariable);\n    }\n    /**\n     * Return the value of the ENVIRONMENT environment variable.\n     */\n    getCurrentEnvironment() {\n        return this.get(this.currentEnvironmentVariable);\n    }\n    /**\n     * Return the value of the AWS_LAMBDA_FUNCTION_MEMORY_SIZE environment variable.\n     */\n    getFunctionMemory() {\n        const value = this.get(this.memoryLimitInMBVariable);\n        return Number(value);\n    }\n    /**\n     * Return the value of the AWS_LAMBDA_FUNCTION_NAME environment variable.\n     */\n    getFunctionName() {\n        return this.get(this.functionNameVariable);\n    }\n    /**\n     * Return the value of the AWS_LAMBDA_FUNCTION_VERSION environment variable.\n     */\n    getFunctionVersion() {\n        return this.get(this.functionVersionVariable);\n    }\n    /**\n     * Return the value of the POWERTOOLS_LOGGER_LOG_EVENT environment variable.\n     */\n    getLogEvent() {\n        const value = this.get(this.logEventVariable);\n        return this.isValueTrue(value);\n    }\n    /**\n     * Return the value of the `POWERTOOLS_LOG_LEVEL` or `LOG_LEVEL` (legacy) environment variables\n     * when the first one is not set.\n     *\n     * The `LOG_LEVEL` environment variable is considered legacy and will be removed in a future release.\n     * The `AWS_LAMBDA_LOG_LEVEL` environment variable always takes precedence over the ones above.\n     */\n    getLogLevel() {\n        const logLevelVariable = this.get(this.logLevelVariable);\n        const logLevelVariableAlias = this.get(this.logLevelVariableLegacy);\n        return logLevelVariable !== '' ? logLevelVariable : logLevelVariableAlias;\n    }\n    /**\n     * Return the value of the POWERTOOLS_LOGGER_SAMPLE_RATE environment variable.\n     */\n    getSampleRateValue() {\n        const value = this.get(this.sampleRateValueVariable);\n        return value && value.length > 0 ? Number(value) : undefined;\n    }\n    /**\n     * Return the value of the `TZ` environment variable or `UTC` if it is not set.\n     */\n    getTimezone() {\n        const value = this.get(this.tzVariable);\n        return value.length > 0 ? value : 'UTC';\n    }\n}\nexport { EnvironmentVariablesService };\n", "/**\n * The indent level for JSON logs.\n *\n * By default Logger will use the `LogJsonIndent.COMPACT` indent level, which\n * produces logs on a single line. This is the most efficient option for\n * CloudWatch Logs.\n *\n * When enabling the `POWERTOOLS_DEV` environment variable, Logger will use the\n * `LogJsonIndent.PRETTY` indent level, which indents the JSON logs for easier\n * reading.\n */\nconst LogJsonIndent = {\n    PRETTY: 4,\n    COMPACT: 0,\n};\nconst LogLevel = {\n    TRACE: 'TRACE',\n    DEBUG: 'DEBUG',\n    INFO: 'INFO',\n    WARN: 'WARN',\n    ERROR: 'ERROR',\n    SILENT: 'SILENT',\n    CRITICAL: 'CRITICAL',\n};\n/**\n * Numeric values for each log level.\n */\nconst LogLevelThreshold = {\n    TRACE: 6,\n    DEBUG: 8,\n    INFO: 12,\n    WARN: 16,\n    ERROR: 20,\n    CRITICAL: 24,\n    SILENT: 28,\n};\nexport { LogJsonIndent, LogLevel, LogLevelThreshold };\n", "import { LogFormatter } from './LogFormatter.js';\nimport { LogItem } from './LogItem.js';\n/**\n * This class is used to transform a set of log key-value pairs\n * in the Powertools for AWS Lambda default structure log format.\n *\n * @class\n * @extends {LogFormatter}\n */\nclass PowertoolsLogFormatter extends LogFormatter {\n    /**\n     * List of keys to order log attributes by.\n     *\n     * This can be a set of keys or an array of keys.\n     */\n    #logRecordOrder;\n    constructor(options) {\n        super(options);\n        this.#logRecordOrder = options?.logRecordOrder;\n    }\n    /**\n     * It formats key-value pairs of log attributes.\n     *\n     * @param {UnformattedAttributes} attributes - unformatted attributes\n     * @param {LogAttributes} additionalLogAttributes - additional log attributes\n     */\n    formatAttributes(attributes, additionalLogAttributes) {\n        const baseAttributes = {\n            cold_start: attributes.lambdaContext?.coldStart,\n            function_arn: attributes.lambdaContext?.invokedFunctionArn,\n            function_memory_size: attributes.lambdaContext?.memoryLimitInMB,\n            function_name: attributes.lambdaContext?.functionName,\n            function_request_id: attributes.lambdaContext?.awsRequestId,\n            level: attributes.logLevel,\n            message: attributes.message,\n            sampling_rate: attributes.sampleRateValue,\n            service: attributes.serviceName,\n            timestamp: this.formatTimestamp(attributes.timestamp),\n            xray_trace_id: attributes.xRayTraceId,\n        };\n        // If logRecordOrder is not set, return the log item with the attributes in the order they were added\n        if (this.#logRecordOrder === undefined) {\n            return new LogItem({ attributes: baseAttributes }).addAttributes(additionalLogAttributes);\n        }\n        const orderedAttributes = {};\n        // If logRecordOrder is set, order the attributes in the log item\n        for (const key of this.#logRecordOrder) {\n            if (key in baseAttributes && !(key in orderedAttributes)) {\n                orderedAttributes[key] = baseAttributes[key];\n            }\n            else if (key in additionalLogAttributes &&\n                !(key in orderedAttributes)) {\n                orderedAttributes[key] = additionalLogAttributes[key];\n            }\n        }\n        // Add remaining attributes from baseAttributes\n        for (const key in baseAttributes) {\n            if (!(key in orderedAttributes)) {\n                orderedAttributes[key] = baseAttributes[key];\n            }\n        }\n        // Add remaining attributes from additionalLogAttributes\n        for (const key in additionalLogAttributes) {\n            if (!(key in orderedAttributes)) {\n                orderedAttributes[key] = additionalLogAttributes[key];\n            }\n        }\n        const powertoolsLogItem = new LogItem({\n            attributes: orderedAttributes,\n        });\n        return powertoolsLogItem;\n    }\n}\nexport { PowertoolsLogFormatter };\n", "/**\n * Class that defines and implements common methods for the formatting of log attributes.\n *\n * When creating a custom log formatter, you should extend this class and implement the\n * {@link formatAttributes | formatAttributes()} method to define the structure of the log item.\n *\n * @abstract\n */\nclass LogFormatter {\n    /**\n     * Instance of the {@link EnvironmentVariablesService} to use for configuration.\n     */\n    envVarsService;\n    constructor(options) {\n        this.envVarsService = options?.envVarsService;\n    }\n    /**\n     * Format an error into a loggable object.\n     *\n     * @example\n     * ```json\n     * {\n     *   \"name\": \"Error\",\n     *   \"location\": \"file.js:1\",\n     *   \"message\": \"An error occurred\",\n     *   \"stack\": \"Error: An error occurred\\n    at file.js:1\\n    at file.js:2\\n    at file.js:3\",\n     *   \"cause\": {\n     *     \"name\": \"OtherError\",\n     *     \"location\": \"file.js:2\",\n     *     \"message\": \"Another error occurred\",\n     *     \"stack\": \"Error: Another error occurred\\n    at file.js:2\\n    at file.js:3\\n    at file.js:4\"\n     *   }\n     * }\n     * ```\n     *\n     * @param error - Error to format\n     */\n    formatError(error) {\n        const { name, message, stack, cause, ...errorAttributes } = error;\n        const formattedError = {\n            name,\n            location: this.getCodeLocation(error.stack),\n            message,\n            stack,\n            cause: error.cause instanceof Error\n                ? this.formatError(error.cause)\n                : error.cause,\n        };\n        for (const key in error) {\n            if (typeof key === 'string' && !['name', 'message', 'stack', 'cause'].includes(key)) {\n                formattedError[key] = errorAttributes[key];\n            }\n        }\n        return formattedError;\n    }\n    /**\n     * Format a date into an ISO 8601 string with the configured timezone.\n     *\n     * If the log formatter is passed an {@link EnvironmentVariablesService} instance\n     * during construction, the timezone is read from the `TZ` environment variable, if present.\n     *\n     * Otherwise, the timezone defaults to ':UTC'.\n     *\n     * @param now - The date to format\n     */\n    formatTimestamp(now) {\n        const defaultTimezone = 'UTC';\n        /**\n         * If a specific timezone is configured and it's not the default `UTC`,\n         * format the timestamp with the appropriate timezone offset.\n         **/\n        const configuredTimezone = this.envVarsService?.getTimezone();\n        if (configuredTimezone && !configuredTimezone.includes(defaultTimezone))\n            return this.#generateISOTimestampWithOffset(now, configuredTimezone);\n        return now.toISOString();\n    }\n    /**\n     * Get the location of an error from a stack trace.\n     *\n     * @param stack - stack trace to parse\n     */\n    getCodeLocation(stack) {\n        if (!stack) {\n            return '';\n        }\n        const stackLines = stack.split('\\n');\n        const regex = /\\(([^)]*?):(\\d+?):(\\d+?)\\)\\\\?$/;\n        for (const item of stackLines) {\n            const match = regex.exec(item);\n            if (Array.isArray(match)) {\n                return `${match[1]}:${Number(match[2])}`;\n            }\n        }\n        return '';\n    }\n    /**\n     * Create a new Intl.DateTimeFormat object configured with the specified time zone\n     * and formatting options.\n     *\n     * The time is displayed in 24-hour format (hour12: false).\n     *\n     * @param timezone - IANA time zone identifier (e.g., \"Asia/Dhaka\").\n     */\n    #getDateFormatter = (timezone) => {\n        const twoDigitFormatOption = '2-digit';\n        const validTimeZone = Intl.supportedValuesOf('timeZone').includes(timezone)\n            ? timezone\n            : 'UTC';\n        return new Intl.DateTimeFormat('en', {\n            year: 'numeric',\n            month: twoDigitFormatOption,\n            day: twoDigitFormatOption,\n            hour: twoDigitFormatOption,\n            minute: twoDigitFormatOption,\n            second: twoDigitFormatOption,\n            hour12: false,\n            timeZone: validTimeZone,\n        });\n    };\n    /**\n     * Generate an ISO 8601 timestamp string with the specified time zone and the local time zone offset.\n     *\n     * @param date - date to format\n     * @param timezone - IANA time zone identifier (e.g., \"Asia/Dhaka\").\n     */\n    #generateISOTimestampWithOffset(date, timezone) {\n        const { year, month, day, hour, minute, second } = this.#getDateFormatter(timezone)\n            .formatToParts(date)\n            .reduce((acc, item) => {\n            acc[item.type] = item.value;\n            return acc;\n        }, {});\n        const datePart = `${year}-${month}-${day}T${hour}:${minute}:${second}`;\n        const offset = -date.getTimezoneOffset();\n        const offsetSign = offset >= 0 ? '+' : '-';\n        const offsetHours = Math.abs(Math.floor(offset / 60))\n            .toString()\n            .padStart(2, '0');\n        const offsetMinutes = Math.abs(offset % 60)\n            .toString()\n            .padStart(2, '0');\n        const millisecondPart = date.getMilliseconds().toString().padStart(3, '0');\n        const offsetPart = `${offsetSign}${offsetHours}:${offsetMinutes}`;\n        return `${datePart}.${millisecondPart}${offsetPart}`;\n    }\n}\nexport { LogFormatter };\n", "import merge from 'lodash.merge';\n/**\n * LogItem is a class that holds the attributes of a log item.\n *\n * It is used by {@link LogFormatter} to store the attributes of a log item and to add additional attributes to it.\n */\nclass LogItem {\n    /**\n     * The attributes of the log item.\n     */\n    attributes = {};\n    /**\n     * Constructor for LogItem.\n     *\n     * Attributes are added in the following order:\n     * - Standard keys provided by the logger (e.g. `message`, `level`, `timestamp`)\n     * - Persistent attributes provided by developer, not formatted (done later)\n     * - Ephemeral attributes provided as parameters for a single log item (done later)\n     *\n     * @param params - The parameters for the LogItem.\n     */\n    constructor(params) {\n        this.addAttributes(params.attributes);\n    }\n    /**\n     * Add attributes to the log item.\n     *\n     * @param attributes - The attributes to add to the log item.\n     */\n    addAttributes(attributes) {\n        merge(this.attributes, attributes);\n        return this;\n    }\n    /**\n     * Get the attributes of the log item.\n     */\n    getAttributes() {\n        return this.attributes;\n    }\n    /**\n     * Prepare the log item for printing.\n     *\n     * This operation removes empty keys from the log item, see {@link removeEmptyKeys | removeEmptyKeys()} for more information.\n     */\n    prepareForPrint() {\n        this.setAttributes(this.removeEmptyKeys(this.getAttributes()));\n    }\n    /**\n     * Remove empty keys from the log item, where empty keys are defined as keys with\n     * values of `undefined`, empty strings (`''`), or `null`.\n     *\n     * @param attributes - The attributes to remove empty keys from.\n     */\n    removeEmptyKeys(attributes) {\n        const newAttributes = {};\n        for (const key in attributes) {\n            if (attributes[key] !== undefined &&\n                attributes[key] !== '' &&\n                attributes[key] !== null) {\n                newAttributes[key] = attributes[key];\n            }\n        }\n        return newAttributes;\n    }\n    /**\n     * Replace the attributes of the log item.\n     *\n     * @param attributes - The attributes to set for the log item.\n     */\n    setAttributes(attributes) {\n        this.attributes = attributes;\n    }\n}\nexport { LogItem };\n"],
  "mappings": "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",
  "names": ["createRequire", "path", "url", "init_cjs_shim", "__esmMin", "require_lodash", "__commonJSMin", "exports", "module", "init_cjs_shim", "LARGE_ARRAY_SIZE", "HASH_UNDEFINED", "HOT_COUNT", "HOT_SPAN", "MAX_SAFE_INTEGER", "argsTag", "arrayTag", "asyncTag", "boolTag", "dateTag", "errorTag", "funcTag", "genTag", "mapTag", "numberTag", "nullTag", "objectTag", "proxyTag", "regexpTag", "setTag", "stringTag", "undefinedTag", "weakMapTag", "arrayBufferTag", "dataViewTag", "float32Tag", "float64Tag", "int8Tag", "int16Tag", "int32Tag", "uint8Tag", "uint8ClampedTag", "uint16Tag", "uint32Tag", "reRegExpChar", "reIsHostCtor", "reIsUint", "typedArrayTags", "freeGlobal", "freeSelf", "root", "freeExports", "freeModule", "moduleExports", "freeProcess", "nodeUtil", "types", "nodeIsTypedArray", "apply", "func", "thisArg", "args", "baseTimes", "n", "iteratee", "index", "result", "baseUnary", "value", "getValue", "object", "key", "overArg", "transform", "arg", "arrayProto", "funcProto", "objectProto", "coreJsData", "funcToString", "hasOwnProperty", "maskSrcKey", "uid", "nativeObjectToString", "objectCtorString", "reIsNative", "Buffer", "Symbol", "Uint8Array", "allocUnsafe", "getPrototype", "objectCreate", "propertyIsEnumerable", "splice", "symToStringTag", "defineProperty", "getNative", "nativeIsBuffer", "nativeMax", "nativeNow", "Map", "nativeCreate", "baseCreate", "proto", "isObject", "Hash", "entries", "length", "entry", "hashClear", "hashDelete", "hashGet", "data", "hashHas", "hashSet", "ListCache", "listCacheClear", "listCacheDelete", "assocIndexOf", "lastIndex", "listCacheGet", "listCacheHas", "listCacheSet", "MapCache", "mapCacheClear", "mapCacheDelete", "getMapData", "mapCacheGet", "mapCacheHas", "mapCacheSet", "size", "Stack", "stackClear", "stackDelete", "stackGet", "stackHas", "stackSet", "pairs", "arrayLikeKeys", "inherited", "isArr", "isArray", "isArg", "isArguments", "isBuff", "isBuffer", "isType", "isTypedArray", "skipIndexes", "isIndex", "assignMergeValue", "eq", "baseAssignValue", "assignValue", "objValue", "array", "baseFor", "createBaseFor", "baseGetTag", "getRawTag", "objectToString", "baseIsArguments", "isObjectLike", "baseIsNative", "isMasked", "pattern", "isFunction", "toSource", "baseIsTypedArray", "isLength", "baseKeysIn", "nativeKeysIn", "isProto", "isPrototype", "baseMerge", "source", "srcIndex", "customizer", "stack", "srcValue", "baseMergeDeep", "newValue", "safeGet", "keysIn", "mergeFunc", "stacked", "isCommon", "isTyped", "isArrayLikeObject", "copyArray", "cloneBuffer", "cloneTypedArray", "isPlainObject", "toPlainObject", "initCloneObject", "baseRest", "start", "setToString", "overRest", "identity", "baseSetToString", "string", "constant", "buffer", "isDeep", "cloneArrayBuffer", "arrayBuffer", "typedArray", "copyObject", "props", "isNew", "createAssigner", "assigner", "sources", "guard", "isIterateeCall", "fromRight", "keysFunc", "iterable", "map", "isKeyable", "isOwn", "tag", "unmasked", "type", "isArrayLike", "Ctor", "otherArgs", "shortOut", "count", "lastCalled", "stamp", "remaining", "other", "stubFalse", "merge", "init_cjs_shim", "init_cjs_shim", "init_cjs_shim", "Console", "randomInt", "init_cjs_shim", "init_cjs_shim", "init_cjs_shim", "Utility", "serviceName", "init_cjs_shim", "EnvironmentVariablesService", "name", "value", "xRayTraceEnv", "xRayTraceData", "field", "key", "init_cjs_shim", "init_cjs_shim", "EXEC_ENV", "init_cjs_shim", "init_cjs_shim", "PREFIX", "TRACER_KEY", "METRICS_KEY", "LOGGER_KEY", "IDEMPOTENCY_KEY", "import_lodash", "init_cjs_shim", "EnvironmentVariablesService", "awsLogLevelVariable", "value", "logLevelVariable", "logLevelVariableAlias", "init_cjs_shim", "LogJsonIndent", "LogLevelThreshold", "init_cjs_shim", "init_cjs_shim", "LogFormatter", "options", "error", "name", "message", "stack", "cause", "errorAttributes", "formattedError", "key", "now", "defaultTimezone", "configuredTimezone", "#generateISOTimestampWithOffset", "stackLines", "regex", "item", "match", "#getDateFormatter", "timezone", "twoDigitFormatOption", "validTimeZone", "date", "year", "month", "day", "hour", "minute", "second", "acc", "datePart", "offset", "offsetSign", "offsetHours", "offsetMinutes", "millisecondPart", "offsetPart", "init_cjs_shim", "import_lodash", "LogItem", "params", "attributes", "merge", "newAttributes", "key", "PowertoolsLogFormatter", "LogFormatter", "#logRecordOrder", "options", "attributes", "additionalLogAttributes", "baseAttributes", "LogItem", "orderedAttributes", "key", "Logger", "_Logger", "Utility", "EnvironmentVariablesService", "LogJsonIndent", "LogLevelThreshold", "#buffer", "#isInitialized", "#keys", "#initialLogLevel", "#jsonReplacerFn", "options", "customConfigService", "rest", "level", "log", "context", "attributes", "attributeKey", "merge", "childLogger", "input", "extraInput", "_target", "_propertyKey", "descriptor", "originalMethod", "loggerRef", "event", "callback", "result", "logger", "_persistentAttributes", "shouldLogEvent", "overwriteValue", "keys", "key", "logLevel", "references", "value", "replacedValue", "selectedLogLevel", "awsLogLevel", "message", "otherInput", "inputMessage", "unformattedBaseAttributes", "additionalAttributes", "type", "item", "found", "sampleRateValue", "consoleMethod", "Console", "optionalParams", "constructorLogLevel", "customConfigValue", "envVarsValue", "constructorValue", "randomInt", "logFormatter", "logRecordOrder", "PowertoolsLogFormatter", "serviceName", "persistentKeys", "persistentLogAttributes", "environment", "jsonReplacerFn", "logger", "Logger", "handler", "event", "record"]
}
